/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/any.proto
 *
 */

import Protobuf


///   `Any` contains an arbitrary serialized protocol buffer message along with a
///   URL that describes the type of the serialized message.
///  
///   Protobuf library provides support to pack/unpack Any values in the form
///   of utility functions or additional generated methods of the Any type.
///  
///   Example 1: Pack and unpack a message in C++.
///  
///       Foo foo = ...;
///       Any any;
///       any.PackFrom(foo);
///       ...
///       if (any.UnpackTo(&foo)) {
///         ...
///       }
///  
///   Example 2: Pack and unpack a message in Java.
///  
///       Foo foo = ...;
///       Any any = Any.pack(foo);
///       ...
///       if (any.is(Foo.class)) {
///         foo = any.unpack(Foo.class);
///       }
///  
///    Example 3: Pack and unpack a message in Python.
///  
///       foo = Foo(...)
///       any = Any()
///       any.Pack(foo)
///       ...
///       if any.Is(Foo.DESCRIPTOR):
///         any.Unpack(foo)
///         ...
///  
///   The pack methods provided by protobuf library will by default use
///   'type.googleapis.com/full.type.name' as the type URL and the unpack
///   methods only use the fully qualified type name after the last '/'
///   in the type URL, for example "foo.bar.com/x/y.z" will yield type
///   name "y.z".
///  
///  
///   JSON
///   ====
///   The JSON representation of an `Any` value uses the regular
///   representation of the deserialized, embedded message, with an
///   additional field `@type` which contains the type URL. Example:
///  
///       package google.profile;
///       message Person {
///         string first_name = 1;
///         string last_name = 2;
///       }
///  
///       {
///         "@type": "type.googleapis.com/google.profile.Person",
///         "firstName": <string>,
///         "lastName": <string>
///       }
///  
///   If the embedded message type is well-known and has a custom JSON
///   representation, that representation will be embedded adding a field
///   `value` which holds the custom JSON in addition to the `@type`
///   field. Example (for message [google.protobuf.Duration][]):
///  
///       {
///         "@type": "type.googleapis.com/google.protobuf.Duration",
///         "value": "1.212s"
///       }
public struct Google_Protobuf_Any: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Google_Protobuf_Any"}
  public var protoMessageName: String {return "Any"}
  public var protoPackageName: String {return "google.protobuf"}
  public var jsonFieldNames: [String: Int] {return [
    "typeUrl": 1,
    "value": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "type_url": 1,
    "value": 2,
  ]}

  ///   A URL/resource name whose content describes the type of the
  ///   serialized protocol buffer message.
  ///  
  ///   For URLs which use the scheme `http`, `https`, or no scheme, the
  ///   following restrictions and interpretations apply:
  ///  
  ///   * If no scheme is provided, `https` is assumed.
  ///   * The last segment of the URL's path must represent the fully
  ///     qualified name of the type (as in `path/google.protobuf.Duration`).
  ///     The name should be in a canonical form (e.g., leading "." is
  ///     not accepted).
  ///   * An HTTP GET on the URL must yield a [google.protobuf.Type][]
  ///     value in binary format, or produce an error.
  ///   * Applications are allowed to cache lookup results based on the
  ///     URL, or have them precompiled into a binary to avoid any
  ///     lookup. Therefore, binary compatibility needs to be preserved
  ///     on changes to types. (Use versioned type names to manage
  ///     breaking changes.)
  ///  
  ///   Schemes other than `http`, `https` (or the empty scheme) might be
  ///   used with implementation specific semantics.
  public var typeURL: String = ""

  ///   Must be a valid serialized protocol buffer of the above specified type.
  public var value: [UInt8] = []

  public init() {}

  public init(typeURL: String? = nil,
    value: [UInt8]? = nil)
  {
    if let v = typeURL {
      self.typeURL = v
    }
    if let v = value {
      self.value = v
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &typeURL)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &value)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if typeURL != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: typeURL, protoFieldNumber: 1, protoFieldName: "type_url", jsonFieldName: "typeUrl", swiftFieldName: "typeURL")
    }
    if value != [] {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: value, protoFieldNumber: 2, protoFieldName: "value", jsonFieldName: "value", swiftFieldName: "value")
    }
  }

  public var _protoc_generated_isEmpty: Bool {
    if typeURL != "" {return false}
    if value != [] {return false}
    return true
  }

  public func _protoc_generated_isEqualTo(other: Google_Protobuf_Any) -> Bool {
    if typeURL != other.typeURL {return false}
    if value != other.value {return false}
    return true
  }
}

