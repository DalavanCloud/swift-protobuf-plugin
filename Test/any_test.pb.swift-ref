/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/any_test.proto
 *
 */

import Protobuf


public struct ProtobufUnittest_TestAny: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestAny"}
  public var protoMessageName: String {return "TestAny"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "int32Value": 1,
    "anyValue": 2,
    "repeatedAnyValue": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "int32_value": 1,
    "any_value": 2,
    "repeated_any_value": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestAny
    var _int32Value: Int32 = 0
    var _anyValue: Google_Protobuf_Any? = nil
    var _repeatedAnyValue: [Google_Protobuf_Any] = []

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_int32Value)
      case 2: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Any.self, value: &_anyValue)
      case 3: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_Any.self, value: &_repeatedAnyValue)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _int32Value != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _int32Value, protoFieldNumber: 1, protoFieldName: "int32_value", jsonFieldName: "int32Value", swiftFieldName: "int32Value")
      }
      if let v = _anyValue {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "any_value", jsonFieldName: "anyValue", swiftFieldName: "anyValue")
      }
      if !_repeatedAnyValue.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedAnyValue, protoFieldNumber: 3, protoFieldName: "repeated_any_value", jsonFieldName: "repeatedAnyValue", swiftFieldName: "repeatedAnyValue")
      }
    }

    var isEmpty: Bool {
      if _int32Value != 0 {return false}
      if _anyValue != nil {return false}
      if !_repeatedAnyValue.isEmpty {return false}
      return true
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _int32Value != other._int32Value {return false}
      if _anyValue != other._anyValue {return false}
      if _repeatedAnyValue != other._repeatedAnyValue {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._int32Value = _int32Value
      clone._anyValue = _anyValue
      clone._repeatedAnyValue = _repeatedAnyValue
      return clone
    }
  }

  private var _storage: _StorageClass?

  public var int32Value: Int32 {
    get {return _storage?._int32Value ?? 0}
    set {_uniqueStorage()._int32Value = newValue}
  }

  public var anyValue: Google_Protobuf_Any {
    get {return _storage?._anyValue ?? Google_Protobuf_Any()}
    set {_uniqueStorage()._anyValue = newValue}
  }

  public var repeatedAnyValue: [Google_Protobuf_Any] {
    get {return _storage?._repeatedAnyValue ?? []}
    set {_uniqueStorage()._repeatedAnyValue = newValue}
  }

  public init() {}

  public init(int32Value: Int32? = nil,
    anyValue: Google_Protobuf_Any? = nil,
    repeatedAnyValue: [Google_Protobuf_Any] = [])
  {
    let storage = _uniqueStorage()
    if let v = int32Value {
      storage._int32Value = v
    }
    storage._anyValue = anyValue
    if !repeatedAnyValue.isEmpty {
      storage._repeatedAnyValue = repeatedAnyValue
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage?.traverse(visitor: &visitor)
  }

  public var _protoc_generated_isEmpty: Bool {return _storage?.isEmpty ?? true}

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAny) -> Bool {
    if let s = _storage {
      if let os = other._storage {
        return s === os || s.isEqualTo(other: os)
      }
      return isEmpty // empty storage == nil storage
    } else if let os = other._storage {
      return os.isEmpty // nil storage == empty storage
    }
    return true // Both nil, both empty
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if _storage == nil {
      _storage = _StorageClass()
    } else if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage!.copy()
    }
    return _storage!
  }
}

