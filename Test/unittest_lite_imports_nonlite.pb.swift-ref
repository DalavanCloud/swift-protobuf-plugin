/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest_lite_imports_nonlite.proto
 *
 */

import Protobuf


public struct ProtobufUnittest_TestLiteImportsNonlite: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestLiteImportsNonlite"}
  public var protoMessageName: String {return "TestLiteImportsNonlite"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "message": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "message": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestLiteImportsNonlite
    var unknown = ProtobufUnknownStorage()
    var _message: ProtobufUnittest_TestAllTypes? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_message)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _message {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
      }
      unknown.traverse(visitor: &visitor)
    }

    var isEmpty: Bool {
      if _message != nil {return false}
      if !unknown.isEmpty {return false}
      return true
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (((_message != nil && !_message!.isEmpty) || (other._message != nil && !other._message!.isEmpty)) && (_message == nil || other._message == nil || _message! != other._message!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._message = _message
      return clone
    }
  }

  private var _storage: _StorageClass?

  public var message: ProtobufUnittest_TestAllTypes? {
    get {return _storage?._message}
    set {_uniqueStorage()._message = newValue}
  }

  public init() {}

  public init(message: ProtobufUnittest_TestAllTypes? = nil)
  {
    let storage = _uniqueStorage()
    storage._message = message
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage?.traverse(visitor: &visitor)
  }

  public var _protoc_generated_isEmpty: Bool {return _storage?.isEmpty ?? true}

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestLiteImportsNonlite) -> Bool {
    if let s = _storage {
      if let os = other._storage {
        return s === os || s.isEqualTo(other: os)
      }
      return isEmpty // empty storage == nil storage
    } else if let os = other._storage {
      return os.isEmpty // nil storage == empty storage
    }
    return true // Both nil, both empty
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if _storage == nil {
      _storage = _StorageClass()
    } else if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage!.copy()
    }
    return _storage!
  }
}

